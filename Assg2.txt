     SECTION A

--------------------------------------------------------------
1. Write a script to create 10 directories, say a1,a2,...,a10
Report error if a directory/file exists with the same name.
-->
diect1.sh


for (( i=1 ; $i<=10  ; i++ ))
do

if [ "-d" "$i" ]; then
echo "$i exists!!!"
else
mkdir "$i"
fi
done


mkdir: cannot create directory ‘a1’: File exists

-------------------------------------------------------------
2. Write a menu based script to perform following string operations
a) To find length of a string
c) Copying string
d) Concatenation of strings
e) Compare two strings
f) Reversing a string
--> operation.sh

#!/bin/bash
do
        echo '1.find length'
        echo '2.copying string'
        echo '3.concate of string'
        echo '4.compare to string'
        echo '5:wq.reverse string'
        read str1
        read option
        case $option in
                1)echo ${#str1}
                        ;;
                2) str2=$str1
                        echo $str2
                        ;;
                3) str2="sayali"
                        echo $str1$str2
                        ;;
                4) str2="sayali"
                        if [ $str1 == $str2 ]
                        then
                                echo "Equal"
                        else
                                echo "Not equal"
                        fi
                        ;;
                5) echo $str1 | rev
                        ;;
--------------------------------------------------------------
3.Write a shell script to rename all files in the current directory with numeric continuous value(Warning: Do this in a personal folder. Don't use Home directory) 

-->numeric.sh
    
 for((i=1;i<10;i++))
   do
           mv a$i abbbb$i
   done

------------------------------------------------------------
4. Write a script that print environment variable(Print $HOME,$PATH,$SHELL,$HISTORY,$LOGNAME,$TERM)
-->env-var.sh

echo "Path = $PATH"  
   echo "Shell = $SHELL"
   echo "History = $HISTORY"
   echo "Logname = $LOGNAME"
   echo "Term = $TERM"
-----------------------------------------------------------

5. Write a shell script to print all files permissions in current directory(Not name or other details)(Use cut commands)
-->

> ls -la | cut -b 1-10
> ls -la | cut -c 1-10
---------------------------------------------------------
6. Write a shell script to print all files permissions and name of file

-->file-permission.sh
 #!/bin/bash

ls -l | awk '{ print $1,$9 }' 

------------------------------------------------------------
7.Write a shell script to print all files name and size greater than 5K

-->file-maxsize.sh


 #!/bin/bash
for i in *
do
        if [ "-f" "$i" ];
                then
#       echo -n  "$i"   
        file=`ls -l "$i" | awk '{print $5}'`
#       echo "  $file"          
if [ "$file" > 5000 ];
                        then
                        ls -l "$i"
                fi 
        fi
done


****************************************************

      SECTION B

1. Write a script To check given year is leap or not.
-->
 vi leap1.sh


#!/bin/bash
	echo 'Enter a year : '
	read year
	if (( $year%4 == 0 && $year%100 != 0 || $year%400 == 0))
	then
		echo 'Leap Year'
	else
		echo 'Not a Leap Year'
	fi


------------------------------------------------------

2. Write a script to print day of the week using
	a) elif

*week-elif.sh


#!/bin/bash

echo "enter the no of day between 1 to 7";
read n;

if [ $n == 1 ]
then
echo 'sunday'
elif [ $n == 2 ]
then
        echo 'monday'
elif [ $n == 3 ]
then
         echo 'tuesday'
 elif [ $n == 4 ]
 then
         echo 'wednesday'
 elif [ $n == 5 ]
 then
         echo 'thursday'
 elif [ $n == 6 ]
 then
         echo 'friday'
 elif [ $n == 7 ]
 then
         echo 'saturday'
 else
         echo 'invalid entry'
 fi

===============================================
	b) case 


*week-case.sh
 
echo "enter a number"
read n
case $n in
1) echo "Sunday" ;;
2) echo "Monday" ;;
3) echo "Tuesday" ;;
4) echo "Wednesday" ;;
5) echo "Thursday" ;;
6) echo "Friday" ;;
7) echo "Saturday" ;;
*) echo "enter value between 1 to 7" ;;
esac


---------------------------------------------------------------

3. a) Write a script to find biggest of three no.s

--> max-no.sh



#!/bin/bash

echo 'enter n1:'
read n1
echo 'enter n2:'
read n2
echo 'enter n3:'
read n3
if (( n1 > n2 && n1 > n3 ))
then
         echo $n1
 elif (( n2 > n1 && n2 > n3 ))
 then
         echo $n2
 else
         echo $n3
 fi



===========================================================
   b) To find avg of 3 no.s, read no.s from keyboard

-->
    avg.sh


#!/bin/bash

echo 'enter n1:'
read n1
echo 'enter n2:'
read n2
echo 'enter n3:'
read n3
(( avg = (( $n1+$n2+$n3 ))/3 ))
echo 'Average : '$avg
-------------------------------------------------------------
4. Write a program to check wahether given no.is even or odd
-->
 odd-even.sh


#!/bin/bash

echo 'enter a number : '
read n
if (( n%2 == 0 ))
then
         echo $n 'is even.'
 else
          echo $n 'is odd'
  fi


---------------------------------------------------------------
5. Write a program to print calendar of current month in next year,previous years.
	For eg:-sep 2014,sep 2012 if current month is sep 2013	

-->cal.sh

#!/bin/bash

	mon=$(date | awk '{print $3}')
	year=$(date | awk '{print $4}')

	let "prev=year-1" "next=year+1"

	cal $mon $prev
	cal $mon $year
	cal $mon $next


-------------------------------------------------------------
6. Write a program to find sum and product of two no.s using 
	a) let 
	b)expr
	c)bc	

-->sum-prod.sh


#!/bin/bash

	echo 'Enter num1 : '
	read num1
	echo 'Enter num2 : '
	read num2

	let "prodlet=num1*num2"

	prodExp=$(expr $num1 \* $num2)

	echo 'Let : '
	echo $prodlet 
	echo 'Expr : '
	echo $prodExp
	echo 'BC : '
	echo $num1 \* $num2 | bc

-------------------------------------------------------------
7. Write a script to generate Fibonacci series.

-->
fibo.sh


#!/bin/bash

	echo "Enter number upto which you want to: "
read num
pre=0
now=1
fnum=0
echo -n "$pre, $now, "
while (( pre + now < num ))
do
(( fnum = pre + now ))
echo -n "$fnum, "
pre=$now
now=$fnum
done

---------------------------------------------------------
8. Write a shell script to reverse the single strings. 

-->rev-string.sh
#!/bin/bash

	echo 'Enter a string : '
	read str
	rev=""
	len=${#str}
	for (( i=$len; i>0; i-- ))
	do
		temp=$(expr $str | cut -c $i)
		rev=$rev$temp
	done

	echo $rev

 OR

 rev1.sh


#!/bin/b

echo 'Enter a string : '
	read str
echo $str | rev
----------------------------------------------------------
9.Write a shell script to reverse the list of strings and reverse each string further in the list.
-->rev-list.sh

#!/bin/bash


	echo 'Enter array of Strings : '
	read -a arr

	min=0
	max=`expr ${#arr[@]} - 1`
	x=$max
	while (( $min <= $max ))
	do
		newArr[$min]=${arr[$max]}
		newArr[$max]=${arr[$min]}
		(( min++ ))
		(( max-- ))
	done

	max=$x

	for (( i=0; i<=max; i++ ))
	do
		rev=""
		str=${newArr[$i]}
		let "len=${#str} -1"
		for (( j=$len; j>=0; j-- ))
		do
			rev="$rev${str:$j:1}"
		done
		newArr[$i]=$rev
	done

	echo ${newArr[@]}

------------------------------------------------------------
10. Write a shell script to print the reverse of an input number.
--> rev-list.sh

#!/bin/bash

	echo 'Enter a number : '
	read num
	n=$num
	sum=0
	rem=0
	while (( $n > 0 ))
	do
		rem=`expr $n % 10`
		sum=`expr $sum \* 10`
		sum=`expr $sum + $rem`
		n=`expr $n / 10`
	done
	echo 'Reverse : ' $sum




----------------------------------------------------
11.Write a shell script to validate password strength. Here are a few assumptions for the password string.
Length  – minimum of 8 characters.
Contain both alphabet and number.
Include both the small and capital case letters.
If the password doesn’t comply with any of the above conditions, then the script should report it as a <Weak Password>.

-->password.sh


echo "enter the password"
 read password
  len="${#password}" 
  if  [ $len -ge 8 ]  
    then 
        echo "$password" | grep -q [0-9] 
    if [ $? -eq 0 ]  
        then
             echo "$password" | grep -q [A-Z] 
        if [ $? -eq 0 ]  
            then
                 echo "$password" | grep -q [a-z]
            if [ $? -eq 0 ]  
                then 
                    echo "$password" | grep -q [$,@,\#,%]
                if [ $? -eq 0 ]  
                    then echo "Strong password"
                else echo "weak password include special chars"
                fi 
            else echo "weak password include lower case char" 
            fi
        else echo "weak password include capital char" 
        fi 
    else echo "please include"
    fi
fi

